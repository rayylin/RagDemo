from pymongo import MongoClient
from langchain.embeddings import OpenAIEmbeddings
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.llms import OpenAI
from langchain.vectorstores import Chroma
from langchain.schema import Document  # Import Document class
from langchain.chat_models import ChatOpenAI

# MongoDB setup
client = MongoClient(mongostr)
db = client['chatbot_db']
collection = db['knowledge_base']  # Collection for knowledge documents

# Initialize OpenAI embeddings
embeddings = OpenAIEmbeddings(api_key=OPENAI_API_KEY)

# Initialize Chroma vector store
def create_chroma_vector_store():
    documents = collection.find()  # Get all documents in the knowledge base
    # Wrap texts in Document objects with 'page_content' as the field
    docs = [Document(page_content=doc['chunk_text']) for doc in documents]

    # Create Chroma vector store with Document objects and embeddings
    vectorstore = Chroma.from_documents(docs, embeddings)
    return vectorstore

# Initialize the Chroma vector store
chroma_vectorstore = create_chroma_vector_store()

# Function to perform similarity search and get the context
def retrieve_context(query):
    results = chroma_vectorstore.similarity_search(query, k=5)  # Get top 5 similar documents
    context = "\n".join([result.page_content for result in results])  # Compile context from results
    return context

# Initialize the chat model with OpenAI
chat_model = ChatOpenAI(model="gpt-3.5-turbo", api_key=OPENAI_API_KEY) 

# Set up a prompt template
prompt_template = PromptTemplate(
    template="Answer the question based on the following documents:\n\n{context}\n\nQuestion: {question}\nAnswer:",
    input_variables=["context", "question"]
)

# Initialize Retrieval-based Q&A chain
rag_chain = RetrievalQA.from_chain_type(
    llm=chat_model,
    retriever=chroma_vectorstore.as_retriever(),  # Use Chroma as retriever
    chain_type="stuff"  # "stuff" combines the documents as context
)

# Function to generate chatbot responsec
def chatbot_response_rag(user_input):
    # Use the RAG chain to generate a response with document retrieval
    response = rag_chain.run({"query": user_input}) 
    
    
    # Save the conversation in MongoDB
    db['chats'].insert_one({
        'user_input': user_input,
        'chatbot_response': response
    })
    
    return response

# Main loop for the chatbot
if __name__ == "__main__":
    print("Welcome to the RAG Chatbot!")
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'exit':
            print("Goodbye!")
            break
        response = chatbot_response_rag(user_input)
        print("Chatbot:", response)
